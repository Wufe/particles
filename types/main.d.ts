import { DrawingInterface } from "./drawing/drawing-interface";
import { IRenderer } from "./rendering/renderer";
import { DefaultObject } from "./utils/object-utils";
import { IParticleSystem, ParticleSystemRequiredFeature } from "./models/particle-system";
import { SystemBridgeEventNotification } from "./drawing/system-bridge";
import { IParticle } from "./models/particle";
import { IProximityDetectionSystem } from "./models/proximity-detection/proximity-detection-system";
import { ISubject } from "./utils/observable";
import { Params, ILibraryInterface, TOnResize } from "./library-interface";
export declare const getDefaultParams: () => DefaultObject<Params>;
export declare class Main extends DrawingInterface implements ILibraryInterface {
    params: Params;
    private _plugin;
    configuration: TConfiguration;
    systems: IParticleSystem[];
    proximityDetectionSystem: IProximityDetectionSystem | null;
    renderer: IRenderer;
    onResize: ISubject<TOnResize>;
    constructor(params: Params);
    start(): void;
    private _initParams;
    private _initRenderer;
    private _initContext;
    private _initCanvas;
    private _resizeDebounceTimer;
    private _initResizeEventListeners;
    private _configureSize;
    private _initSystems;
    private _initProximityDetectionSystems;
    private _preStart;
    time: number;
    deltaTime: number;
    private _lastPerf;
    private _loop;
    notify(type: SystemBridgeEventNotification, system: IParticleSystem): void;
    getAllParticles(): IParticle[];
    getParticlesBySystemFeature(feature: ParticleSystemRequiredFeature): IParticle[];
    feedProximityDetectionSystem(objects: IParticle[]): void;
    getNeighbours(particle: IParticle, radius: number): IParticle[];
    getProximityDetectionSystem(): IProximityDetectionSystem;
}
export declare type TConfiguration = {
    pixelRatio?: number;
    isRetina?: boolean;
    initialized: boolean;
    width?: number;
    height?: number;
    depth?: number;
    [k: string]: any;
};
export declare const init: (params: Params) => void;
